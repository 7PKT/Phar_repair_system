// server.js (Updated with LINE Integration)
const express = require('express');
const cors = require('cors');
const path = require('path');
require('dotenv').config();

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Express app ‡∏Å‡πà‡∏≠‡∏ô
const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Static files for uploaded images
app.use('/uploads', express.static('uploads'));

// Import routes ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á app ‡πÅ‡∏•‡πâ‡∏ß
const authRoutes = require('./routes/auth');
const repairRoutes = require('./routes/repairs');
const adminRoutes = require('./routes/admin');

// ‚úÖ Import system-settings route
let systemSettingsRoutes = null;
try {
    systemSettingsRoutes = require('./routes/repairs/systemSettings');
    console.log('‚úÖ System settings route loaded');
} catch (error) {
    console.warn('‚ö†Ô∏è System settings route not found:', error.message);
    console.log('üí° Creating routes/repairs/system-settings.js file is required');
}

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/repairs', repairRoutes);
app.use('/api/admin', adminRoutes);

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° system-settings route
if (systemSettingsRoutes) {
    app.use('/api/repairs/system-settings', systemSettingsRoutes);
    console.log('‚úÖ System settings route mounted at /api/repairs/system-settings');
}

// Health check
app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        message: 'Repair System API is running',
        timestamp: new Date().toISOString(),
        features: {
            lineNotifications: true,
            systemSettings: !!systemSettingsRoutes,
            imageUpload: true
        }
    });
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE
app.get('/api/line/test', async (req, res) => {
    try {
        let lineMessaging = null;
        try {
            lineMessaging = require('./services/lineMessaging');
        } catch (error) {
            return res.status(400).json({
                success: false,
                error: 'LINE Messaging service ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå services/lineMessaging.js'
            });
        }
        
        // Refresh config ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        await lineMessaging.refreshConfig();
        
        if (!lineMessaging.isConfigured()) {
            return res.status(400).json({
                success: false,
                error: 'LINE Bot ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° Channel Access Token ‡πÅ‡∏•‡∏∞ Channel Secret'
            });
        }

        if (!lineMessaging.isEnabled()) {
            return res.status(400).json({
                success: false,
                error: 'LINE Notifications ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Group ID',
                debug: {
                    configured: lineMessaging.isConfigured(),
                    enabled: lineMessaging.isEnabled(),
                    hasToken: !!lineMessaging.channelAccessToken,
                    hasGroupId: !!lineMessaging.groupId,
                    notificationsEnabled: lineMessaging.notificationsEnabled
                }
            });
        }

        const result = await lineMessaging.testConnection();
        
        if (result.success) {
            res.json({
                success: true,
                message: 'LINE Bot ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                data: result.data
            });
        } else {
            res.status(400).json({
                success: false,
                error: result.error
            });
        }
    } catch (error) {
        console.error('LINE test error:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Bot: ' + error.message
        });
    }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug LINE settings
app.get('/api/line/debug', async (req, res) => {
    try {
        let lineMessaging = null;
        let lineServiceStatus = 'not_found';
        
        try {
            lineMessaging = require('./services/lineMessaging');
            lineServiceStatus = 'loaded';
        } catch (error) {
            lineServiceStatus = 'error: ' + error.message;
        }

        if (!lineMessaging) {
            return res.json({
                success: false,
                lineServiceStatus,
                error: 'LINE Messaging service ‡πÑ‡∏°‡πà‡∏û‡∏ö'
            });
        }

        let databaseSettings = [];
        try {
            const db = require('./config/database');
            
            // Refresh config
            await lineMessaging.refreshConfig();
            
            // ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const [settings] = await db.execute(`
                SELECT setting_key, 
                       CASE WHEN is_sensitive = 1 THEN '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' ELSE setting_value END as setting_value,
                       is_sensitive
                FROM system_settings 
                WHERE setting_key LIKE 'line_%' OR setting_key LIKE 'notification_%'
                ORDER BY setting_key
            `);
            databaseSettings = settings;
        } catch (dbError) {
            databaseSettings = `Database error: ${dbError.message}`;
        }

        res.json({
            success: true,
            lineServiceStatus,
            lineMessaging: {
                configured: lineMessaging.isConfigured(),
                enabled: lineMessaging.isEnabled(),
                hasToken: !!lineMessaging.channelAccessToken,
                hasSecret: !!lineMessaging.channelSecret,
                hasGroupId: !!lineMessaging.groupId,
                notificationsEnabled: lineMessaging.notificationsEnabled,
                initialized: lineMessaging.initialized
            },
            databaseSettings,
            systemSettingsRoute: !!systemSettingsRoutes
        });
    } catch (error) {
        console.error('LINE debug error:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ debug LINE: ' + error.message
        });
    }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° webhook endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE (‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏≤ Group ID)
app.post('/api/webhook', (req, res) => {
    try {
        const events = req.body.events || [];
        
        console.log('üì® Webhook received:', {
            eventsCount: events.length,
            body: req.body
        });
        
        events.forEach((event, index) => {
            console.log(`üìã Event ${index + 1}:`, {
                type: event.type,
                source: event.source
            });
            
            if (event.source.type === 'group') {
                console.log(`üÜî GROUP ID FOUND: ${event.source.groupId}`);
                console.log('   üëÜ ‡πÉ‡∏ä‡πâ Group ID ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö');
            }
            
            if (event.source.type === 'user') {
                console.log(`üë§ User ID: ${event.source.userId}`);
            }
        });
        
        res.status(200).send('OK');
    } catch (error) {
        console.error('Webhook error:', error);
        res.status(500).send('Error');
    }
});

app.get('/api/webhook', (req, res) => {
    res.json({
        message: 'LINE Webhook endpoint is ready',
        instructions: [
            '1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Webhook URL ‡πÉ‡∏ô LINE Console: https://yourdomain.com/api/webhook',
            '2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° LINE',
            '3. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°',
            '4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö console logs ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π Group ID'
        ]
    });
});

// Error handling middleware
app.use((error, req, res, next) => {
    console.error('Error:', error);

    if (error.code === 'LIMIT_FILE_SIZE') {
        return res.status(400).json({
            message: '‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5MB)'
        });
    }

    if (error.message.includes('‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')) {
        return res.status(400).json({
            message: error.message
        });
    }

    res.status(500).json({
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå'
    });
});

// 404 handler
app.use((req, res) => {
    console.log(`‚ùå 404 - Route not found: ${req.method} ${req.url}`);
    res.status(404).json({
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö API endpoint ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'
    });
});

// Initialize LINE Messaging on startup
async function initializeServices() {
    try {
        console.log('üîß Initializing services...');
        
        // Initialize LINE Messaging
        let lineMessaging = null;
        try {
            lineMessaging = require('./services/lineMessaging');
            await lineMessaging.refreshConfig();
            
            if (lineMessaging.isConfigured()) {
                console.log('‚úÖ LINE Messaging Service initialized successfully');
                console.log(`   - Has Token: ${!!lineMessaging.channelAccessToken}`);
                console.log(`   - Has Secret: ${!!lineMessaging.channelSecret}`);
                console.log(`   - Has Group ID: ${!!lineMessaging.groupId}`);
                console.log(`   - Notifications Enabled: ${lineMessaging.notificationsEnabled}`);
                console.log(`   - Overall Status: ${lineMessaging.isEnabled() ? '‚úÖ ENABLED' : '‚ö†Ô∏è DISABLED'}`);
            } else {
                console.log('‚ö†Ô∏è LINE Messaging Service not configured');
                console.log('üí° Go to System Settings to configure LINE Bot credentials');
            }
        } catch (error) {
            console.error('‚ùå LINE Messaging Service not found:', error.message);
            console.log('üí° Make sure you have services/lineMessaging.js file');
        }
        
        // Create system_settings table if not exists
        try {
            const db = require('./config/database');
            await db.execute(`
                CREATE TABLE IF NOT EXISTS system_settings (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    setting_key VARCHAR(100) UNIQUE NOT NULL,
                    setting_value TEXT,
                    setting_type ENUM('string', 'number', 'boolean', 'json') DEFAULT 'string',
                    description TEXT,
                    is_sensitive BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    INDEX idx_setting_key (setting_key)
                )
            `);
            
            console.log('‚úÖ System settings table ready');
        } catch (dbError) {
            console.error('‚ùå Database initialization error:', dbError.message);
        }
        
    } catch (error) {
        console.error('‚ùå Error initializing services:', error);
    }
}

// Start server
app.listen(PORT, async () => {
    console.log('=' .repeat(60));
    console.log(`üöÄ Server is running on port ${PORT}`);
    console.log(`üì± API URL: http://localhost:${PORT}/api`);
    console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
    if (systemSettingsRoutes) {
        console.log(`üîß System Settings: http://localhost:${PORT}/api/repairs/system-settings`);
    }
    console.log(`üîó LINE Test: http://localhost:${PORT}/api/line/test`);
    console.log(`üêõ LINE Debug: http://localhost:${PORT}/api/line/debug`);
    console.log(`ü™ù Webhook: http://localhost:${PORT}/api/webhook`);
    console.log('=' .repeat(60));
    
    // Initialize services after server starts
    await initializeServices();
    
    console.log('=' .repeat(60));
    console.log('üéØ NEXT STEPS:');
    console.log('1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå routes/repairs/system-settings.js');
    console.log('2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç services/repairService.js ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ LINE notifications');
    console.log('3. ‡πÄ‡∏Ç‡πâ‡∏≤ System Settings ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ React');
    console.log('4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Channel Access Token');
    console.log('5. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Channel Secret');
    console.log('6. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Group ID');
    console.log('7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    console.log('8. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
    console.log('=' .repeat(60));
});

module.exports = app;