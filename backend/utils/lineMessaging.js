// backend/utils/lineMessaging.js
const axios = require('axios');

class LineMessagingAPI {
    constructor() {
        this.channelAccessToken = process.env.LINE_CHANNEL_ACCESS_TOKEN;
        this.baseURL = 'https://api.line.me/v2/bot';
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏´‡∏≤ User ID
    async sendMessage(userId, message) {
        if (!this.channelAccessToken) {
            console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö LINE Channel Access Token');
            return false;
        }

        if (!userId) {
            console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö User ID');
            return false;
        }

        try {
            const response = await axios.post(
                `${this.baseURL}/message/push`,
                {
                    to: userId,
                    messages: [
                        {
                            type: 'text',
                            text: message
                        }
                    ]
                },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.channelAccessToken}`
                    }
                }
            );

            return response.status === 200;
        } catch (error) {
            console.error('LINE Messaging API Error:', error.response?.data || error.message);
            return false;
        }
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    async notifyNewRepairRequest(userIds, repairData) {
        if (!userIds || userIds.length === 0) {
            console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö LINE User IDs');
            return;
        }

        const message = `
üîß ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡πÉ‡∏´‡∏°‡πà
üìã ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: ${repairData.title}
üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${repairData.location}
‚ö†Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ${this.getPriorityText(repairData.priority)}
üë§ ‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á: ${repairData.requester_name}
üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}
        `.trim();

        console.log('üì± Sending LINE notifications to', userIds.length, 'users');

        const promises = userIds.map(userId => this.sendMessage(userId, message));
        const results = await Promise.allSettled(promises);
        const successCount = results.filter(r => r.status === 'fulfilled' && r.value).length;
        console.log(`‚úÖ LINE notifications sent successfully to ${successCount}/${userIds.length} users`);
    }

    async notifyStatusUpdate(userIds, repairData, oldStatus, newStatus, updatedBy) {
        if (!userIds || userIds.length === 0) {
            console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö LINE User IDs');
            return;
        }

        const message = `
üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°
üìã ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: ${repairData.title}
üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°: ${this.getStatusText(oldStatus)}
üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà: ${this.getStatusText(newStatus)}
üë§ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏î‡∏¢: ${updatedBy}
üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}
${newStatus === 'completed' && repairData.completion_details ? `\n‚úÖ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${repairData.completion_details}` : ''}
        `.trim();

        console.log('üì± Sending LINE status updates to', userIds.length, 'users');

        const promises = userIds.map(userId => this.sendMessage(userId, message));
        const results = await Promise.allSettled(promises);
        const successCount = results.filter(r => r.status === 'fulfilled' && r.value).length;
        console.log(`‚úÖ LINE status updates sent successfully to ${successCount}/${userIds.length} users`);
    }

    // Helper functions
    getPriorityText(priority) {
        const priorityMap = {
            'low': '‡∏ï‡πà‡∏≥',
            'medium': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
            'high': '‡∏™‡∏π‡∏á',
            'urgent': '‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô'
        };
        return priorityMap[priority] || priority;
    }

    getStatusText(status) {
        const statusMap = {
            'pending': '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
            'assigned': '‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
            'in_progress': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
            'completed': '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
            'cancelled': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
        };
        return statusMap[status] || status;
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    async testConnection() {
        try {
            const response = await axios.get(`${this.baseURL}/info`, {
                headers: {
                    'Authorization': `Bearer ${this.channelAccessToken}`
                }
            });
            
            console.log('‚úÖ LINE Messaging API connection successful');
            return true;
        } catch (error) {
            console.error('‚ùå LINE Messaging API connection failed:', error.response?.data || error.message);
            return false;
        }
    }
}

module.exports = new LineMessagingAPI();